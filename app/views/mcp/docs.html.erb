<div>
  <!-- Header section with breadcrumbs -->
  <nav class="flex border-b border-gray-200 bg-white mb-6" aria-label="Breadcrumb">
    <ol role="list" class="flex w-full max-w-screen-xl space-x-4 px-4 sm:px-6 lg:px-8 py-3">
      <li class="flex">
        <div class="flex items-center">
          <a href="/" class="text-gray-400 hover:text-gray-500">
            <svg class="size-5 shrink-0" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M9.293 2.293a1 1 0 0 1 1.414 0l7 7A1 1 0 0 1 17 11h-1v6a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-6H3a1 1 0 0 1-.707-1.707l7-7Z" clip-rule="evenodd" />
            </svg>
            <span class="sr-only">Home</span>
          </a>
        </div>
      </li>
      <li class="flex">
        <div class="flex items-center">
          <svg class="h-full w-6 shrink-0 text-gray-200" viewBox="0 0 24 44" preserveAspectRatio="none" fill="currentColor" aria-hidden="true">
            <path d="M.293 0l22 22-22 22h1.414l22-22-22-22H.293z" />
          </svg>
          <a href="/mcp/dashboard" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">MCP Dashboard</a>
        </div>
      </li>
      <li class="flex">
        <div class="flex items-center">
          <svg class="h-full w-6 shrink-0 text-gray-200" viewBox="0 0 24 44" preserveAspectRatio="none" fill="currentColor" aria-hidden="true">
            <path d="M.293 0l22 22-22 22h1.414l22-22-22-22H.293z" />
          </svg>
          <a href="#" class="ml-4 text-sm font-medium text-indigo-600 hover:text-indigo-800" aria-current="page">Documentation</a>
        </div>
      </li>
    </ol>
  </nav>

  <!-- Main heading -->
  <div class="sm:flex sm:items-center sm:justify-between mb-8">
    <div>
      <h1 class="text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl">MCP Documentation</h1>
      <p class="mt-2 text-sm text-gray-700 md:text-base">
        How to use the Model Context Protocol server in Context Hub
      </p>
    </div>
    <div class="mt-4 sm:mt-0">
      <a href="/mcp/dashboard" class="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50">
        <svg class="mr-1.5 -ml-0.5 size-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Back to Dashboard
      </a>
    </div>
  </div>

  <!-- Tabs -->
  <div class="border-b border-gray-200 mb-6">
    <nav class="-mb-px flex space-x-8" aria-label="Tabs">
      <button id="tab-usage" class="border-indigo-500 text-indigo-600 hover:border-indigo-700 hover:text-indigo-700 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
        Usage Guide
      </button>
      <button id="tab-api" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
        API Reference
      </button>
      <button id="tab-examples" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
        Examples
      </button>
    </nav>
  </div>

  <!-- Tab content -->
  <div class="tab-content">
    <!-- Usage Guide Tab -->
    <div id="content-usage" class="block space-y-6">
      <div class="prose prose-indigo max-w-none">
        <% if @mcp_readme_content %>
          <%= raw Kramdown::Document.new(@mcp_readme_content).to_html %>
        <% else %>
          <p>No documentation content available.</p>
        <% end %>
      </div>
    </div>

    <!-- API Reference Tab -->
    <div id="content-api" class="hidden space-y-6">
      <div class="bg-white shadow-sm rounded-lg overflow-hidden mb-6">
        <div class="px-4 py-5 sm:p-6">
          <h2 class="text-lg font-medium text-gray-900 mb-4">MCP API Endpoints</h2>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-300">
              <thead>
                <tr>
                  <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Endpoint</th>
                  <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Method</th>
                  <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Description</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200">
                <tr>
                  <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">/mcp</td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">GET</td>
                  <td class="px-3 py-4 text-sm text-gray-500">Root MCP endpoint providing protocol info</td>
                </tr>
                <tr>
                  <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">/mcp/messages</td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">POST</td>
                  <td class="px-3 py-4 text-sm text-gray-500">JSON-RPC endpoint for invoking tools and accessing resources</td>
                </tr>
                <tr>
                  <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">/mcp/sse</td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">GET</td>
                  <td class="px-3 py-4 text-sm text-gray-500">Server-Sent Events endpoint for streaming responses</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <div class="px-4 py-5 sm:p-6">
          <h2 class="text-lg font-medium text-gray-900 mb-4">OpenAPI Documentation</h2>
          <pre class="overflow-auto p-4 bg-gray-50 font-mono text-sm rounded-md max-h-96"><code><%= JSON.pretty_generate(JSON.parse(@swagger_content)) rescue @swagger_content %></code></pre>
        </div>
      </div>
    </div>

    <!-- Examples Tab -->
    <div id="content-examples" class="hidden space-y-6">
      <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <div class="px-4 py-5 sm:p-6">
          <h2 class="text-lg font-medium text-gray-900 mb-4">Accessing User Preferences</h2>
          
          <p class="mb-4 text-sm text-gray-700">This example shows how to access user preferences from an MCP client:</p>
          
          <div class="overflow-x-auto">
            <pre class="overflow-auto p-4 bg-gray-50 font-mono text-sm rounded-md"><code>{
  "jsonrpc": "2.0",
  "id": "request-1",
  "method": "getResource",
  "params": {
    "uri": "user_preferences"
  }
}</code></pre>
          </div>
        </div>
      </div>
      
      <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <div class="px-4 py-5 sm:p-6">
          <h2 class="text-lg font-medium text-gray-900 mb-4">Invoking a tool</h2>
          
          <p class="mb-4 text-sm text-gray-700">This example shows how to invoke the GetUserPreferencesTool:</p>
          
          <div class="overflow-x-auto">
            <pre class="overflow-auto p-4 bg-gray-50 font-mono text-sm rounded-md"><code>{
  "jsonrpc": "2.0", 
  "id": "request-2",
  "method": "invokeToolExecution",
  "params": {
    "toolId": "GetUserPreferencesTool",
    "toolArguments": {
      "category": "Coding Style"
    }
  }
}</code></pre>
          </div>
        </div>
      </div>
      
      <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <div class="px-4 py-5 sm:p-6">
          <h2 class="text-lg font-medium text-gray-900 mb-4">Setting a preference</h2>
          
          <p class="mb-4 text-sm text-gray-700">This example shows how to set a preference value:</p>
          
          <div class="overflow-x-auto">
            <pre class="overflow-auto p-4 bg-gray-50 font-mono text-sm rounded-md"><code>{
  "jsonrpc": "2.0", 
  "id": "request-3",
  "method": "invokeToolExecution",
  "params": {
    "toolId": "SetUserPreferenceTool",
    "toolArguments": {
      "category": "Coding Style",
      "key": "tab_size",
      "value": 4
    }
  }
}</code></pre>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- JavaScript for tab switching -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const tabs = ['usage', 'api', 'examples'];
      const tabButtons = tabs.map(tab => document.getElementById(`tab-${tab}`));
      const tabContents = tabs.map(tab => document.getElementById(`content-${tab}`));
      
      function setActiveTab(activeTabIndex) {
        tabButtons.forEach((button, index) => {
          if (index === activeTabIndex) {
            button.classList.add('border-indigo-500', 'text-indigo-600');
            button.classList.remove('border-transparent', 'text-gray-500');
          } else {
            button.classList.remove('border-indigo-500', 'text-indigo-600');
            button.classList.add('border-transparent', 'text-gray-500');
          }
        });
        
        tabContents.forEach((content, index) => {
          if (index === activeTabIndex) {
            content.classList.remove('hidden');
            content.classList.add('block');
          } else {
            content.classList.add('hidden');
            content.classList.remove('block');
          }
        });
      }
      
      tabButtons.forEach((button, index) => {
        button.addEventListener('click', () => {
          setActiveTab(index);
        });
      });
      
      // Initialize with first tab active
      setActiveTab(0);
    });
  </script>
</div>